---
title: "PS1-like"
output: html_document
---

#################################################
##Likelihood exploration
#################################################
```{r}
set.seed(123)
x<-rnorm(100)
##Suppose we just observed x, a bunch of random numbers.
##We first want to see what the distribution looks like. We can do this:
hist(x)
mean(x)
var(x)
```

##Looks vaguely normalish, no? [Of course, you can see that I'm drawing variates from the normal distribution, so this isn't surprising. Pretend you didn't see that part!]
##So what if we wanted to estimate the mean and var of the normal distribution that may have generated this set of draws.

##How do we do this? The key statistical technique is to consider the likelihood.

##Let's start by writing a function that computes the likelihood for "x" in a normal with unknown mean and var (collectively, "pars").

```{r}
likelihood<-function(pars,x) { #see the first eqn here, http://mathworld.wolfram.com/NormalDistribution.html
    tmp<-exp(-(x-pars[1])^2/(2*pars[2]))
    tmp/sqrt(2*pars[2]*pi)
}
```


##To completely evaluate this function, we would need to know x and pars. We only know x (this is the problem of estimation in general: the values in pars are not known to us!).
##With known x, we can think of the likelihood as the "probability" of observing the draws x from a normal distribution with parameters pars.
##That is, we are thinking of the likelihood as a function of pars (x is known).

##Let's think about what we get if the mean is unknown and the SD=1
```{r}
out<-list()
for (m in seq(-1,1,length.out=100)) {
    like<-rep(NA,length(x))
    for (i in 1:length(x)) {
        like[i]<-likelihood(c(m,1),x[i])
    }
    c(c(m,prod(like)))->out[[as.character(m) ]]
}

plot(do.call("rbind",out),type="b") #this is a likelihood surface where we're seeing the likelihood as a function of the unknown mean
#Q. what do you notice? 

```

##From a computational perspective, working with the products of small numbers is very unstable. So we instead work with the sum of the logs.
##Why is this ok? First of all, log(xy)=log(x) + log(y)
##Second, log(f(x)) is a monotic transformation of f(x). So if we maximize log(f(x)) funtion, then we've also maximized f(x)
##Below is a function that will do this.

```{r}
set.seed(123)
x<-rnorm(100)
ll<-function(pars,x) {
    likelihood<-function(pars,x) {
        tmp<-exp(-(x-pars[1])^2/(2*pars[2]))
        tmp/sqrt(2*pars[2]*pi)
    }
    like<-rep(NA,length(x))
    for (i in 1:length(x)) {
        like[i]<-likelihood(pars,x[i])
    }
    -1*sum(log(like))
}
optim(par=c(-2,2),ll,x=x)$par #these are the mean and variance estimates produced by maximum likelihood.
```
#Q. How do our estimates vary in accuracy as a function of the sample size (change 100 to something much bigger and much smaller in the top line)? What does this connect to in your understanding of estimation theory (think standard error)?

```{r}
df1<-read.table("emp-rasch.txt")
df2<-read.table("rasch.txt")
```


Item Quality

Download item response data from here: https://github.com/ben-domingue/252L/blob/master/data/emp-rasch.txt
Consider the item statistics (p-values & item-total correlations) discussed in the Crocker & Algina text. What do you think? As a point of contrast, consider them vis-a-vis the item statistics generated by this data: https://github.com/ben-domingue/252L/blob/master/data/rasch.txt
[Note: Code to compute such statistics will be available from an in-class lab.]

```{r}
df1[is.na(df1)] <- 0
df2[is.na(df2)] <- 0
```

```{r}

colSums(df1)/nrow(df1)
mean(colSums(df1))/nrow(df1)

colSums(df2)/nrow(df2)
mean(colSums(df2))/nrow(df2)

```


P-Values

```{r}
get.coors<-function(df1) {
    r.xt<-numeric()
    ss<-rowSums(df1)
    for (i in 1:ncol(df1)) {
        r.xt[i]<-cor(ss,df1[,i])
    }
    r.xt
}

get.coors(df2)

get.coors(df2)

```

For both tests correlations are in between 0.2-0.6. Those are overall low correlations which means many items should be rewrittem or removed.
pch=19,cex=2
```{r}

plot.fun<-function(df1) { 
    pv<-colMeans(df1,na.rm=TRUE)
    r.xt<-get.coors(df1)
    plot(pv,r.xt, pch=19,cex=2)
    loess(r.xt~pv)->m
    cbind(pv,fitted(m))->tmp
    lines(tmp[order(tmp[,1]),],col="red",lwd=3)
    NULL
}

par(mfrow=c(2,1))
plot.fun(df1)
plot.fun(df2)
plot.fun(df2)


```


